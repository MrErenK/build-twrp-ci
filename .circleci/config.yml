version: 2.1
jobs:
  build:
    machine:
      image: ubuntu-2204:current
    resource_class: large
    environment:
      DEVICE_CODENAME: begonia

    steps:
      - run:
          name: Setup
          command: |
            sudo DEBIAN_FRONTEND=noninteractive apt-get update -y
            sudo DEBIAN_FRONTEND=noninteractive apt-get install -y repo bc bison build-essential curl ccache coreutils flex g++-multilib gcc-multilib git gnupg \
            gperf libxml2 lib32z1-dev liblz4-tool libncurses5-dev libsdl1.2-dev libwxgtk3.0-gtk3-dev imagemagick lunzip lzop schedtool squashfs-tools xsltproc zip \
            zlib1g-dev perl xmlstarlet virtualenv xz-utils rr jq libncurses5 pngcrush lib32ncurses5-dev git-lfs libxml2 openjdk-11-jdk wget lib32readline-dev \
            libssl-dev libxml2-utils android-sdk-libsparse-utils lld zlib1g-dev gcc-multilib g++-multilib libc6-dev-i386 \
            lib32ncurses5-dev x11proto-core-dev libx11-dev lib32z1-dev libgl1-mesa-dev libxml2-utils xsltproc unzip fontconfig ca-certificates bc cpio imagemagick \
            bsdmainutils lz4 aria2 rclone ssh-client libncurses5 libssl-dev rsync schedtool python3 python-is-python3 libarchive-tools

      - run:
          name: Setup ccache
          command: |
            cd $CIRCLE_WORKING_DIRECTORY
            mkdir ccache
            sudo mkdir /mnt/ccache
            sudo mount --bind $CIRCLE_WORKING_DIRECTORY/ccache /mnt/ccache
            echo 'export USE_CCACHE=1' >> $BASH_ENV
            echo 'export CCACHE_DIR=/mnt/ccache' >> $BASH_ENV
            echo 'export CCACHE_EXEC=$(which ccache)' >> $BASH_ENV
            source $BASH_ENV
            ccache -o compression=true
            ccache -M 20G
            ccache -z

      - run:
          name: Repo init and sync
          command: |
            PROVIDER="circleci.com"
            cd $CIRCLE_WORKING_DIRECTORY
            mkdir $DEVICE_CODENAME && cd $DEVICE_CODENAME
            git config --global user.name "$CIRCLE_PROJECT_USERNAME"
            git config --global user.email "$CIRCLE_PROJECT_USERNAME@$PROVIDER"
            repo init --depth=1 -u https://github.com/minimal-manifest-twrp/platform_manifest_twrp_aosp.git -b twrp-12.1
            sudo cp .repo/repo/repo /usr/bin/repo
            sudo chmod +x /usr/bin/repo
            repo sync -j$(nproc --all)

      - run:
          name: Clone device tree
          command: |
            DT_LINK="https://github.com/begonia-recovery/twrp_device_xiaomi_begonia"
            DT_BRANCH="twrp-12.1"
            DT_PATH="device/xiaomi/begonia"
            cd $CIRCLE_WORKING_DIRECTORY/$DEVICE_CODENAME
            git clone --depth=1 $DT_LINK -b "$DT_BRANCH" "$DT_PATH"

      - run:
          name: Apply device specific patches
          command: |
            cd $CIRCLE_WORKING_DIRECTORY/$DEVICE_CODENAME
            cd bootable/recovery
            git fetch https://github.com/begonia-recovery/twrp_bootable_recovery android-12.1 --depth=10
            git cherry-pick 2615cf0410dfe596ac58966bf47c127b8eaa11fe f56a547012410bc89fb3b35a70cc18b8bced6c73 || git cherry-pick --abort

      - run:
          name: Build
          command: |
            cd $CIRCLE_WORKING_DIRECTORY/$DEVICE_CODENAME
            source build/envsetup.sh
            lunch twrp_$DEVICE_CODENAME-eng
            mka recoveryimage -j$(nproc --all)

      - run:
          name: Upload
          command: |
            cd $CIRCLE_WORKING_DIRECTORY/$DEVICE_CODENAME
            wget "https://raw.githubusercontent.com/As9124k82134/pdup/master/pdup" && chmod +x pdup
            ./pdup out/target/product/$DEVICE_CODENAME/recovery.img
